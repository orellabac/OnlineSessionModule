// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Server.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\OnlineSessionModule\Templates\console.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class console : consoleBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!doctype html>\r\n<html>\r\n<head>\r\n\t<script src=\"https://code.jquery.com/jquery-1.7" +
                    ".1.min.js\" integrity=\"sha256-iBcUE/x23aI6syuqF7EeT/+JFBxjPs5zeFJEXxumwb0=\" cross" +
                    "origin=\"anonymous\"></script>\r\n\t<script src=\"https://cdnjs.cloudflare.com/ajax/li" +
                    "bs/jq-console/2.7.7/jqconsole.min.js\"></script>\r\n <style>    /* The console cont" +
                    "ainer element */\r\n    #console {\r\n      width: 800px;\r\n      height: 500px;\r\n   " +
                    "   background-color:black;\r\n    }\r\n    /* The inner console element. */\r\n    .jq" +
                    "console {\r\n        padding: 10px;\r\n    }\r\n    /* The cursor. */\r\n    .jqconsole-" +
                    "cursor {\r\n        background-color: gray;\r\n    }\r\n    /* The cursor color when t" +
                    "he console looses focus. */\r\n    .jqconsole-blurred .jqconsole-cursor {\r\n       " +
                    " background-color: #666;\r\n    }\r\n    /* The current prompt text color */\r\n    .j" +
                    "qconsole-prompt {\r\n        color: #0d0;\r\n    }\r\n    /* The command history */\r\n " +
                    "   .jqconsole-old-prompt {\r\n        color: #0b0;\r\n        font-weight: normal;\r\n" +
                    "    }\r\n    /* The text color when in input mode. */\r\n    .jqconsole-input {\r\n   " +
                    "     color: #dd0;\r\n    } \r\n    /* Previously entered input. */\r\n    .jqconsole-o" +
                    "ld-input {\r\n        color: #bb0;\r\n        font-weight: normal;\r\n    }\r\n    /* Th" +
                    "e text color of the output. */\r\n    .jqconsole-output {\r\n        color: white;\r\n" +
                    "    }\r\n\r\n\t/* The text color of the output. */\r\n    .jqconsole-output-error {\r\n  " +
                    "      color: red;\r\n    }\r\n\r\n  </style>\r\n\r\n</head>\r\n<body>\r\n     <div id=\"console" +
                    "\"></div>\r\n    <div id=\"results\"></div>\r\n     <script>\r\n\t    var sessionID = \'");
            
            #line 64 "C:\OnlineSessionModule\Templates\console.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SessionID));
            
            #line default
            #line hidden
            this.Write("\';\r\n        var term = $(\'#console\').jqconsole(\'Hi\\n\', \'>>>\');\r\n\t\twindow.term = t" +
                    "erm;\r\n        term.Write(\'Welcome to console for session \' + sessionID + \'\\r\\n\'," +
                    "\'jqconsole-output\');\r\n        term.startPrompt = function () {\r\n          // Sta" +
                    "rt the prompt with history enabled.\r\n          term.Prompt(true, function (input" +
                    ") {\r\n            // Output input with the class jqconsole-output.\r\n\t\t\tterm.proce" +
                    "ssCommand(input);\r\n          });\r\n        };\r\n        term.startPrompt();\r\n    <" +
                    "/script>\r\n\r\n    <script>\r\n        term.commandProcessors = [];\r\n        term.las" +
                    "tCommand = \'\';\r\n        term.currentCommand = \'\';\r\n        term.commandCallback " +
                    "= function(response) {\r\n            term.Write(response,\'jqconsole-output\');\r\n  " +
                    "          term.startPrompt();\r\n        };\r\n        term.processCommand = functio" +
                    "n(command) {\r\n          term.pendingPromise = $.Deferred();\r\n          term.pend" +
                    "ingPromise.done(\r\n            function(resolvedResponse)\r\n            {\r\n       " +
                    "       term.commandCallback(resolvedResponse);\r\n            });\r\n          term." +
                    "executeCommand(command,term.pendingPromise);\r\n        };\r\n\r\n        term.execute" +
                    "Command = function (command, pendingPromise) \r\n\t\t{\r\n\t\t\tvar handled = false;\r\n\t\t\t" +
                    "for(var i=0;!handled && i<term.commandProcessors.length;i++) \r\n\t\t\t{\r\n\t\t\t\tvar cur" +
                    "rent = term.commandProcessors[i];\r\n\t\t\t\tif (current.handleCommand(command))\r\n\t\t\t\t" +
                    "{\r\n\t\t\t\t    try \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcurrent.processCommand(command);\r\n\t\t\t\t\t\tpendingPr" +
                    "omise.resolve(\"OK\\r\\n\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(Error) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpendingPromi" +
                    "se.resolve(\"Error\\r\\n\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\thandled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!han" +
                    "dled) \r\n\t\t\t{\r\n\t\t\t\tpendingPromise.resolve(\"Command not recognized\\r\\n\");\r\n\t\t\t}\r\n " +
                    "       };\r\n    </script>\r\n\r\n\r\n    <!-- command processing -->\r\n    <script>\r\n   " +
                    "     function CommandDumpBinItem() {\r\n            this.commandMatcher = /dump\\s+" +
                    "bin\\s+item\\s+(.*)/g;\r\n            this.handleCommand = function (command) {\r\n\t\t\t" +
                    "\tthis.commandMatcher.lastIndex = -1;\r\n                var match = this.commandMa" +
                    "tcher.exec(command);\r\n                if (match && match[0]) //Check if matched\r" +
                    "\n                {\r\n                    return true;\r\n                }\r\n       " +
                    "         else\r\n                {\r\n                    return false;\r\n           " +
                    "     }\r\n            }\r\n            this.processCommand = function (command) {\r\n\t" +
                    "\t\t\tthis.commandMatcher.lastIndex = -1;\r\n                var match = this.command" +
                    "Matcher.exec(command);\r\n                var ID = match[1];\r\n                $.aj" +
                    "ax({url:\'./commandDumpBinItem\',data:JSON.stringify({sessionID:sessionID,ID:ID})," +
                    "type:\'POST\'})\r\n                    .done(function (response) {\r\n                " +
                    "        $(\"#results\").html(\'<pre>\' + response + \'</pre>\');\r\n                    " +
                    "});            \r\n\t\t\t\t}\r\n        }\r\n        term.commandProcessors.push(new Comma" +
                    "ndDumpBinItem());\r\n    </script>\r\n\r\n\t  <script>\r\n        function CommandDumpIte" +
                    "m() {\r\n            this.commandMatcher = /dump\\s+item\\s+(.*)/g;\r\n            thi" +
                    "s.handleCommand = function (command) {\r\n\t\t\t\tthis.commandMatcher.lastIndex = -1;\r" +
                    "\n                var match = this.commandMatcher.exec(command);\r\n               " +
                    " if (match && match[0]) //Check if matched\r\n                {\r\n                 " +
                    "   return true;\r\n                }\r\n                else\r\n                {\r\n   " +
                    "                 return false;\r\n                }\r\n            }\r\n            th" +
                    "is.processCommand = function (command) {\r\n\t\t\t\tthis.commandMatcher.lastIndex = -1" +
                    ";\r\n                var match = this.commandMatcher.exec(command);\r\n             " +
                    "   var ID = match[1];\r\n                $.ajax({url:\'./commandDumpItem\',data:JSON" +
                    ".stringify({sessionID:sessionID,ID:ID}),type:\'POST\'})\r\n                    .done" +
                    "(function (response) {\r\n                        $(\"#results\").html(response);\r\n " +
                    "                   });\r\n            }\r\n        }\r\n        term.commandProcessors" +
                    ".push(new CommandDumpItem());\r\n    </script>\r\n\r\n\t  <script>\r\n        function Co" +
                    "mmandDumpByPattern() {\r\n            this.commandMatcher = /dump\\s+pattern\\s+(.*)" +
                    "/g;\r\n            this.handleCommand = function (command) {\r\n\t\t\t\tthis.commandMatc" +
                    "her.lastIndex = -1;\r\n                var match = this.commandMatcher.exec(comman" +
                    "d);\r\n                if (match && match[0]) //Check if matched\r\n                " +
                    "{\r\n                    return true;\r\n                }\r\n                else\r\n  " +
                    "              {\r\n                    return false;\r\n                }\r\n         " +
                    "   }\r\n            this.processCommand = function (command) {\r\n                th" +
                    "is.commandMatcher.lastIndex = -1;\r\n\t\t\t\tvar match = this.commandMatcher.exec(comm" +
                    "and);\r\n                var pattern = match[1];\r\n\t\t\t\tvar page = 1;\r\n\t\t\t\tvar numIt" +
                    "ems = 50;\r\n\t\t\t\tvar index = 0;\r\n\t\t\t\tvar regex = match[1];\r\n\t\t\t\t$.ajax({url:\'./com" +
                    "mandDumpByPattern\',data:JSON.stringify(\r\n\t\t\t\t\t{sessionID:sessionID,\r\n\t\t\t\t\tpage:p" +
                    "age,\r\n\t\t\t\t\tnumItems:numItems,\r\n\t\t\t\t\tindex:index,regex:regex})\r\n\t\t\t\t\t,type:\'POST\'" +
                    "})\r\n                    .done(function (response) {\r\n                        $(\"" +
                    "#results\").html(response);\r\n                    });            \r\n            }\r\n" +
                    "        }\r\n        term.commandProcessors.push(new CommandDumpByPattern());\r\n   " +
                    " </script>\r\n\r\n\t\t  <script>\r\n        function CommandDumpSession() {\r\n           " +
                    " this.commandMatcher = /dump\\s+session/g;\r\n            this.handleCommand = func" +
                    "tion (command) {\r\n\t\t\t\tthis.commandMatcher.lastIndex = -1;\r\n                var m" +
                    "atch = this.commandMatcher.exec(command);\r\n                if (match && match[0]" +
                    ") //Check if matched\r\n                {\r\n                    return true;\r\n     " +
                    "           }\r\n                else\r\n                {\r\n                    retur" +
                    "n false;\r\n                }\r\n            }\r\n            this.processCommand = fu" +
                    "nction (command) {\r\n\t\t\t\tvar url = \'./commandDumpSession?sessionID=\' + sessionID;" +
                    "\r\n\t\t\t\t$(\'<a/>\', {\r\n\t\t\t\t\tid: \'downloadFile\',\r\n\t\t\t\t\thref: url,\r\n\t\t\t\t\tstyle: \'displ" +
                    "ay:hidden;\',\r\n\t\t\t\t\tdownload: \'\'\r\n\t\t\t\t}).appendTo(\'body\');\r\n\r\n\t\t\t\t$(\"#downloadFil" +
                    "e\")[0].click();\r\n\t\t\t\t$(\"#downloadFile\").remove();\r\n            }\r\n        }\r\n   " +
                    "     term.commandProcessors.push(new CommandDumpSession());\r\n    </script>\r\n</bo" +
                    "dy>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 250 "C:\OnlineSessionModule\Templates\console.tt"

 public dynamic Model {get;set;}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class consoleBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
