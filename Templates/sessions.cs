// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Server.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\OnlineSessionModule\Templates\sessions.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class sessions : sessionsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <met" +
                    "a http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" con" +
                    "tent=\"width=device-width, initial-scale=1\">\r\n    <!-- The above 3 meta tags *mus" +
                    "t* come first in the head; any other head content must come *after* these tags -" +
                    "->\r\n    <title>List of sessions for current application</title>\r\n    <script src" +
                    "=\"https://use.fontawesome.com/720940a13c.js\"></script>\r\n    <!-- Latest compiled" +
                    " and minified CSS -->\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrap" +
                    "cdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJ" +
                    "RAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\r\n   " +
                    " <!-- Optional theme -->\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootst" +
                    "rapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1" +
                    "iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymo" +
                    "us\">\r\n\r\n\r\n\r\n    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements" +
                    " and media queries -->\r\n    <!-- WARNING: Respond.js doesn\'t work if you view th" +
                    "e page via file:// -->\r\n    <!--[if lt IE 9]>\r\n      <script src=\"https://oss.ma" +
                    "xcdn.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\r\n      <script src=\"https:/" +
                    "/oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\r\n    <![endif]-->\r\n    <" +
                    "script>\r\n        function openConsole(sessionID) {\r\n            window.open(\'./c" +
                    "onsole|\' + sessionID, \'_blank\').focus();\r\n        }\r\n\r\n        function refreshS" +
                    "ession(sessionID) {\r\n            var id = \"#size\" + sessionID; \r\n            $.g" +
                    "et(\"./size?sessionID=\" + sessionID).done(function (size) {\r\n                $(id" +
                    ").html(size);\r\n            });\r\n        }\r\n        function loadDetails(sessionI" +
                    "D,page,numItems) {\r\n            \r\n            $.get(\"./details?sessionID=\" + ses" +
                    "sionID + \"&page=\" + page + \"&numItems=\" + numItems).done(function (details) {\r\n " +
                    "               $(\"#results\").html(details);\r\n            });\r\n        }\r\n    </s" +
                    "cript>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h2>List of curren" +
                    "t sessions</h2>\r\n        <table class=\"table\">\r\n            <thead>\r\n           " +
                    "     <tr>\r\n                    <th>Actions</th>\r\n                    <th>Session" +
                    "Id</th>\r\n                    <th>IPAddress</th>\r\n                    <th>Referre" +
                    "r</th>\r\n                    <th>Started</th>\r\n                    <th>Size</th>\r" +
                    "\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n");
            
            #line 63 "C:\OnlineSessionModule\Templates\sessions.tt"
foreach (OnlineUserInfo user in Model.users)
{
            
            #line default
            #line hidden
            this.Write("                <tr>\r\n                    <td>\r\n                        <!--Refre" +
                    "sh --><a class=\"btn\" title=\"opens a console for session\" href=\"#\" onclick=\"openC" +
                    "onsole(\'");
            
            #line 67 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.SessionId));
            
            #line default
            #line hidden
            this.Write("\')\"><i data-toggle=\"opens a console for session\" class=\"fa fa-terminal\"></i></a>\r" +
                    "\n                        <!--Refresh --><a class=\"btn\" title=\"queries current se" +
                    "ssion size\"  href=\"#\" onclick=\"refreshSession(\'");
            
            #line 68 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.SessionId));
            
            #line default
            #line hidden
            this.Write("\')\"><i class=\"fa fa-refresh\"></i></a>\r\n                        <!--ShowList--><a " +
                    "class=\"btn\" title=\"display the current session contents\" href=\"#\" onclick=\"loadD" +
                    "etails(\'");
            
            #line 69 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.SessionId));
            
            #line default
            #line hidden
            this.Write("\',1,50)\"><i class=\"fa fa-list\"></i></a>\r\n                    </td>\r\n             " +
                    "       <td>");
            
            #line 71 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.SessionId));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                    <td>");
            
            #line 72 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.IPAddress));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                    <td>");
            
            #line 73 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.UrlReferrer));
            
            #line default
            #line hidden
            this.Write("</td>  \r\n                    <td>");
            
            #line 74 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.SessionStarted));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                    <td><span id=\"size");
            
            #line 75 "C:\OnlineSessionModule\Templates\sessions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(user.SessionId));
            
            #line default
            #line hidden
            this.Write("\">?</span></td>\r\n                </tr>\r\n");
            
            #line 77 "C:\OnlineSessionModule\Templates\sessions.tt"
}
            
            #line default
            #line hidden
            this.Write(@"            </tbody>
        </table>
    </div>
     <div id=""results"" class=""container""></div>
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js""></script>
    <!-- Latest compiled and minified JavaScript -->
    <script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"" integrity=""sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"" crossorigin=""anonymous""></script>

</body>
</html>

");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 90 "C:\OnlineSessionModule\Templates\sessions.tt"

public dynamic Model {get;set;}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class sessionsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
